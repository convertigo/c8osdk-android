apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'convertigo-sdk-android'

    publishedGroupId = 'com.convertigo.sdk'
    libraryName = 'c8oSDKAndroid'
    artifact = 'c8oSDKAndroid'

    libraryDescription = 'Allows Android apps to access Convertigo mBaaS services such as FullSync data replication for offline, push notifications and back-end connectors'

    siteUrl = 'http://www.convertigo.com/document/convertigo-client-sdk'
    gitUrl =  'https://github.com/convertigo/c8osdk-android'

    libraryVersion = '2.1.8'

    developerId = 'Convertigo'
    developerName = 'Convertigo SA'
    developerEmail = 'info@convertigo.com'

    licenseName = 'GNU General Public License'
    licenseUrl = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
    allLicenses = ["GPL-3.0"]
}


android {
    compileSdkVersion 15
    buildToolsVersion '25.0.0'
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 10
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    productFlavors {
    }
    adbOptions {
        timeOutInMs 20 * 60 * 1000  // 20 minutes
        installOptions "-d","-t"
    }
}

dependencies {
    compile 'com.couchbase.lite:couchbase-lite-android:1.4.0'
    compile 'com.couchbase.lite:couchbase-lite-java-javascript:1.4.0'
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
        options {
            links "http://docs.oracle.com/javase/8/docs/api/"
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
            encoding "UTF-8"
            failOnError false
            showFromPublic()
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}


task generateZipJavadoc(type: Zip, dependsOn: {generateReleaseJavadoc}) {
    classifier = 'javadoc'
    from {generateReleaseJavadoc}.destinationDir
}


//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
